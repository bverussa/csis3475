import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class Database
{	
	private static String dbName;
	
//	public Database()
//	{
		// First check if user is Admin - create function
		
//		String dbName;
//		
//		switch(option)
//		{
//			case 1: // Create DB
//				dbName = getDBName("Create Database");
//				if (dbName != null) createDB(dbName);
//				break;
//			case 2: // Delete DB
//				dbName = getDBName("Delete Database");
//				if (dbName != null) deleteDB(dbName);
//				deleteDB(dbName);
//				break;
//			case 3: // Create Table
//				
//			default:
//				JOptionPane.showMessageDialog(null, "Please, enter a correct Database name");
//		}
//	}
	
	private String getUserInput(int type, String msg)
	{
		String label = "";
		
		switch(type)
		{
			case 1: // Database
				label = "Database Name:";
				break;
			case 2: // Table
				label = "Table Name:";
				break;
		}
		
		JTextField userInput = new JTextField();
		final JComponent[] input = new JComponent[] 
		{
			new JLabel(label), userInput
		};
		
		int result = JOptionPane.showConfirmDialog(null, input, msg, JOptionPane.PLAIN_MESSAGE);
		
		if (result == JOptionPane.OK_OPTION)
		{
			return userInput.getText();
		}
		else
		{
			return null;
		}
	}
	
	public void createDB()
	{
		Database.dbName = getUserInput(1, "Create Database").toLowerCase();
		
		if (!Database.dbName.isEmpty())
		{
			File database = new File("Databases/" + dbName);
			
			if (!database.exists())
			{
				boolean check = false;
				
				try
				{
					database.mkdirs();
					check = true;
				}
				catch(SecurityException e)
				{
					JOptionPane.showMessageDialog(null, e);
				}
				if (check)
				{
					ClientApplication.currentDB = Database.dbName;
					JOptionPane.showMessageDialog(null, "Database " + dbName + " created!");
				}
			}
			else
			{
				JOptionPane.showMessageDialog(null, "Database " + dbName + " already exist!");
				ClientApplication.currentDB = Database.dbName;
			}
		}
		else
		{
			Database.dbName = null;
			ClientApplication.currentDB = Database.dbName;
			JOptionPane.showMessageDialog(null, "Please, enter a database name");
		}
	}
	
	public static ReturnValue createDB(String query)
	{
		ReturnValue r = new ReturnValue();
		// CREATE DATABASE %DBNAME%
		Database.dbName = query.split(" ")[2].toLowerCase();
		
		if (!Database.dbName.isEmpty())
		{
			File database = new File("Databases/" + dbName);
			
			if (!database.exists())
			{
				boolean check = false;
				
				try
				{
					database.mkdirs();
					check = true;
				}
				catch(SecurityException e)
				{
					r.success = false;
					r.msg = e.toString();
				}
				
				if (check)
				{
					ClientApplication.currentDB = Database.dbName;
					r.success = true;
					r.msg = "Database " + dbName + " created!";
				}
			}
			else
			{
				ClientApplication.currentDB = Database.dbName;
				r.success = false;
				r.msg =  "Database " + dbName + " already exist!";
			}
		}
		else
		{
			Database.dbName = null;
			ClientApplication.currentDB = Database.dbName;
			r.success = false;
			r.msg = "Please, enter a database name";
		}
		return r;
	}
	
	public void deleteDB()
	{
		Database.dbName = getUserInput(1, "Delete Database").toLowerCase();
		
		if (!Database.dbName.isEmpty())
		{	
			if (!Database.dbName.equals("master"))
			{
				File database = new File("Databases/" + Database.dbName);
				
				if (database.exists())
				{
					File[] tables = database.listFiles();
			        if (tables != null)
			        {
			            for (int i = 0; i < tables.length; i++)
			            {
			                tables[i].delete();
			            }
			        }
			        
			        database.delete();
			        ClientApplication.currentDB = null;
			        JOptionPane.showMessageDialog(null, "Database " + Database.dbName + " deleted!");
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Database " + Database.dbName + " does not exist!");
				}
			}
			else
			{
				JOptionPane.showMessageDialog(null, "You can not delete MASTER database!");
				this.deleteDB();
			}
		}
		else
		{
			JOptionPane.showMessageDialog(null, "Please, enter a database name");
			this.deleteDB();
		}
	}
	
	public static ReturnValue deleteDB(String query)
	{
		ReturnValue r = new ReturnValue();
		// DELETE DATABASE %DBNAME%
		Database.dbName = query.split(" ")[2].toLowerCase();
		
		if (!Database.dbName.isEmpty())
		{	
			if (!Database.dbName.equals("master"))
			{
				File database = new File("Databases/" + Database.dbName);
				
				if (database.exists())
				{
					File[] tables = database.listFiles();
			        if (tables != null)
			        {
			            for (int i = 0; i < tables.length; i++)
			            {
			                tables[i].delete();
			            }
			        }
			        
			        database.delete();
			        ClientApplication.currentDB = null;
			        r.success = true;
			        r.msg = "Database " + Database.dbName + " deleted!";
			        
				}
				else
				{
					r.success = false;
			        r.msg = "Database " + Database.dbName + " does not exist!";
				}
			}
			else
			{
				r.success = false;
		        r.msg = "You can not delete MASTER database!";
			}
		}
		else
		{
			r.success = false;
	        r.msg = "Please, enter a database name";
		}
		return r;
	}
	
	public void createTable()
	{
		String tableName;
		tableName = getUserInput(2, "Create Table");
		String dbTable = Database.dbName + "/" + tableName;
		Writer tableToDisk = null;
		
		try
		{
			tableToDisk = new BufferedWriter(
					new OutputStreamWriter(
							new FileOutputStream(dbTable), "utf-8"));
		}
		catch (IOException ex)
		{
			
		}
		finally
		{
			try
			{
				tableToDisk.close();
			}
			catch (Exception ex)
			{
			
			}
		}
	}
}
